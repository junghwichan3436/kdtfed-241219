// Exclude조건부 타입
// type Exclude<T, U> = T extends U ? never : T;
// //두가지 타입변수를 받는다 맞다면 네버타입이 사용되서 값을 반환할수조차없다 아니라면  직접 T를 찾아서 타입별칭에 반환했다 Exclude라는

// type A = Exclude<number | string | boolean, string>;

// infer : Inferred  :  추론된
//기본적으로 어떤 변수를 선언하고 해당 변수 안에 깂을 적용 => 타입을 추론
// infer추론은 특정 함수에서 반환값의 타입을 추론

type ReturnType<T> = T extends () => infer R ? R : never;
//결과가 참이 될수 있게 추론 해준다
type FuncA = () => string;
type FuncB = () => number;

type A = ReturnType<FuncA>;
type B = ReturnType<FuncB>;
